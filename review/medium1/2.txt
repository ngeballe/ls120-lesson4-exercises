Question 2

Alyssa created the following code to keep track of items for a shopping cart application she's writing:

```ruby

class InvoiceEntry
  attr_reader :quantity, :product_name

  def initialize(product_name, number_purchased)
    @quantity = number_purchased
    @product_name = product_name
  end

  def update_quantity(updated_count)
    # prevent negative quantities from being set
    quantity = updated_count if updated_count >= 0
  end
end

```

Alan looked at the code and spotted a mistake. "This will fail when update_quantity is called", he says.

Can you spot the mistake and how to address it?

#Answer:
The quantity variable being set in InvoiceEntry#update_quantity is a local variable, so the new quantity be saved; the InvoiceEntry object's state won't change. This could be fixed by using the instance variable instead:

```ruby

class InvoiceEntry
  ...

  def update_quantity(updated_count)
    # prevent negative quantities from being set
    @quantity = updated_count if updated_count >= 0
  end
end

```

Or you could change the attr_reader :quantity to an attr_accessor and use self.quantity instead of the instance variable:

```ruby

class InvoiceEntry
  attr_accessor :quantity
  attr_reader :product_name

  def initialize(product_name, number_purchased)
    @quantity = number_purchased
    @product_name = product_name
  end

  ...

  def update_quantity(updated_count)
    # prevent negative quantities from being set
    self.quantity = updated_count if updated_count >= 0
  end
end

```
